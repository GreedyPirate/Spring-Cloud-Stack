/*
 * This file is generated by jOOQ.
*/
package com.example.domain.jooq.tables.records;


import com.example.domain.jooq.tables.Test;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> implements Record5<UInteger, String, Integer, Integer, Integer> {

    private static final long serialVersionUID = -224778642;

    /**
     * Setter for <code>jay.test.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>jay.test.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>jay.test.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>jay.test.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jay.test.java</code>.
     */
    public void setJava(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>jay.test.java</code>.
     */
    public Integer getJava() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>jay.test.mysql</code>.
     */
    public void setMysql(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>jay.test.mysql</code>.
     */
    public Integer getMysql() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>jay.test.kafka</code>.
     */
    public void setKafka(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>jay.test.kafka</code>.
     */
    public Integer getKafka() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<UInteger, String, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<UInteger, String, Integer, Integer, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field1() {
        return Test.TEST.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Test.TEST.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Test.TEST.JAVA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Test.TEST.MYSQL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return Test.TEST.KAFKA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getJava();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getMysql();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getKafka();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getJava();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getMysql();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getKafka();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value3(Integer value) {
        setJava(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value4(Integer value) {
        setMysql(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value5(Integer value) {
        setKafka(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord values(UInteger value1, String value2, Integer value3, Integer value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(UInteger id, String name, Integer java, Integer mysql, Integer kafka) {
        super(Test.TEST);

        set(0, id);
        set(1, name);
        set(2, java);
        set(3, mysql);
        set(4, kafka);
    }
}
